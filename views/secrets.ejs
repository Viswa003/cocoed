<%- include('partials/header') %>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/styles.css">
  <style>
    body {
      font-family: 'Arial', sans-serif;
      margin: 0;
      padding: 0;
      display: flex;
      flex-direction: column;
      height: 100vh;
    }
    
    #join-container {
      padding-top:100px;
      display: flex;
      flex-direction: column;
      align-items: center;
      margin: 20px;
    }
    
    #editor-container {
      flex: 1;
      display: flex;
    }
    
    #participants-list {
      flex: 0 0 200px;
      padding: 20px;
      border-right: 1px solid #ccc;
    }
    
    #code-editor {
      flex: 1;
      padding: 20px;
      border-right: 1px solid #ccc;
      white-space: pre-wrap;
    }
    
    #chat-container {
      flex: 0 0 300px;
      padding: 20px;
      display: flex;
      flex-direction: column;
    }
    
    #chat-messages {
      flex: 1;
      overflow-y: auto;
    }
    
    #message-input {
      margin-top: 10px;
    }
    
    button {
      margin-top: 10px;
    }
    
  </style>
  <title>Collaborative Code Editor</title>
</head>
<body>
  <div id="join-container">
    <input type="text" id="room-input" placeholder="Enter room code">
    <input type="text" id="username-input" placeholder="Enter your username">
    <button onclick="joinRoom()">Join Room</button>
  </div>
  <div id="editor-container">
    <div id="participants-list"></div>
    <div id="code-editor" contenteditable="true" spellcheck="false"></div>
    <div id="chat-container">
      <div id="chat-messages"></div>
      <input type="text" id="message-input" placeholder="Type your message...">
      <button onclick="sendMessage()">Send</button>
    </div>
  </div>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.1.2/socket.io.js"></script>
  <script>
    const socket = io();

function joinRoom() {
  const roomCode = document.getElementById('room-input').value.trim();
  const username = document.getElementById('username-input').value.trim();

  if (roomCode && username) {
    document.getElementById('join-container').style.display = 'none';
    document.getElementById('editor-container').style.display = 'flex';

    // Emit 'joinRoom' event to the server
    socket.emit('joinRoom', roomCode, username);
  } else {
    alert('Please enter a valid room code and username.');
  }
}

function sendMessage() {
  const messageInput = document.getElementById('message-input');
  const message = messageInput.value.trim();

  if (message) {
    // Emit 'sendMessage' event to the server
    socket.emit('sendMessage', message);

    // Display the message in the chat area
    displayMessage('You', message);

    // Clear the input field
    messageInput.value = '';
  }
}

function displayMessage(username, message) {
  const chatMessages = document.getElementById('chat-messages');
  const messageElement = document.createElement('div');
  messageElement.innerHTML = `<strong>${username}:</strong> ${message}`;
  chatMessages.appendChild(messageElement);

  // Auto-scroll to the bottom of the chat area
  chatMessages.scrollTop = chatMessages.scrollHeight;
}

// Handle 'userJoined' event from the server
socket.on('userJoined', (username) => {
  // Display a message indicating that a new user has joined
  displayMessage('System', `${username} has joined the room.`);
});

// Handle 'updateCode' event from the server
socket.on('updateCode', (code) => {
  if (code !== undefined && code.trim() !== '') {
    document.getElementById('code-editor').innerText = code;
  }
});

// Handle 'updateParticipants' event from the server
socket.on('updateParticipants', (participants) => {
  // Update the participants list with the current participants
  const participantsList = document.getElementById('participants-list');
  participantsList.innerHTML = '<strong>Participants:</strong>';
  participants.forEach((participant) => {
    const participantElement = document.createElement('div');
    participantElement.innerText = participant;
    participantsList.appendChild(participantElement);
  });
});

  </script>
</body>
</html>
